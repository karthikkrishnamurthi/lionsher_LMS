<%#*Dummy Listener api that runs along with scorm 1.2 course for Admin preview %>
<%#*Author : Karthik%>

<html>
<head>
<%= favicon_link_tag "lion.png", :rel => "icon" %>

<script type="text/javascript">


function LMSInitialize(dummyString) {
	return "true";
}


function LMSGetValue(varname) {
	var req = createRequest();
	req.open('GET','admin_getvalue?varname='+urlencode(varname)+'&code='+Math.random(),false);
	req.send(null);
	if (req.status != 200) {
		alert('Problem with Request');
		return "";
	}
	else {
          var student_detail;
          var x = req.responseText;
          switch(varname)
          {
            case "cmi.core.student_id": student_detail = x.split('(')[5]; break;
            case "cmi.core.student_name": student_detail = x.split(')')[5]+','+""; break;
            case "cmi.core.score.raw": student_detail = x.split('@')[5]; break;
            case "cmi.core.score.max": student_detail = x.split('?')[5]; break;
            case "cmi.core.score.min": student_detail = x.split('/')[5]; break;
            case "cmi.core.lesson_status": student_detail = x.split('#')[5]; break;
            case "cmi.core.lesson_location": student_detail = x.split('*')[5]; break;
            case "cmi.core.lesson_mode": student_detail = x.split('$')[5]; break;
            case "cmi.core.session_time": student_detail = x.split('!')[5]; break;
            case "cmi.core.total_time": student_detail = x.split('[')[5]; break;
            case "cmi.suspend_data": student_detail = x.split(']')[5]; break;
            case "cmi.launch_data": student_detail = x.split('|')[5]; break;
            case "cmi.core.entry": student_detail = x.split('^')[5]; break;
            case "cmi.core.exit": student_detail = x.split('~')[5]; break;
            case "cmi.core.credit": student_detail = x.split('-')[5]; break;
          }
          return student_detail;
	}
}

function LMSSetValue(varname,varvalue) {
	var req = createRequest();
	req.open('POST','admin_setvalue?varname='+urlencode(varname)+'&code='+Math.random(),false);
	var params = 'varvalue='+urlencode(varvalue);
	req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
	req.setRequestHeader("Content-length", params.length);
	req.setRequestHeader("Connection", "close");
	req.send(params);
	if (req.status != 200) {
		alert('Problem with Request');
		return "false";
	}
	else {
		return "true";
	}
}

function LMSCommit(dummyString) {
	return "true";
}


function LMSFinish(dummyString) {
	return "true";
}


function LMSGetLastError() {
	return 0;
}

function LMSGetDiagnostic(errorCode) {
	return "diagnostic string";
}

function LMSGetErrorString(errorCode) {
	return "error string";
}


function createRequest() {
	var request;
	try {
		request = new XMLHttpRequest();
	}
	catch (tryIE) {
		try {
			request = new ActiveXObject("Msxml2.XMLHTTP");
		}
		catch (tryOlderIE) {
			try {
				request = new ActiveXObject("Microsoft.XMLHTTP");
			}
			catch (failed) {
				alert("Error creating XMLHttpRequest");
			}
		}
	}
	return request;
}

function urlencode( str ) {
	
    var histogram = {}, unicodeStr='', hexEscStr='';
    var ret = (str+'').toString();
    var replacer = function(search, replace, str) {
        var tmp_arr = [];
        tmp_arr = str.split(search);
        return tmp_arr.join(replace);
    };
    
    histogram["'"]   = '%27';
    histogram['(']   = '%28';
    histogram[')']   = '%29';
    histogram['*']   = '%2A';
    histogram['~']   = '%7E';
    histogram['!']   = '%21';
    histogram['%20'] = '+';
    histogram['\u00DC'] = '%DC';
    histogram['\u00FC'] = '%FC';
    histogram['\u00C4'] = '%D4';
    histogram['\u00E4'] = '%E4';
    histogram['\u00D6'] = '%D6';
    histogram['\u00F6'] = '%F6';
    histogram['\u00DF'] = '%DF';
    histogram['\u20AC'] = '%80';
    histogram['\u0081'] = '%81';
    histogram['\u201A'] = '%82';
    histogram['\u0192'] = '%83';
    histogram['\u201E'] = '%84';
    histogram['\u2026'] = '%85';
    histogram['\u2020'] = '%86';
    histogram['\u2021'] = '%87';
    histogram['\u02C6'] = '%88';
    histogram['\u2030'] = '%89';
    histogram['\u0160'] = '%8A';
    histogram['\u2039'] = '%8B';
    histogram['\u0152'] = '%8C';
    histogram['\u008D'] = '%8D';
    histogram['\u017D'] = '%8E';
    histogram['\u008F'] = '%8F';
    histogram['\u0090'] = '%90';
    histogram['\u2018'] = '%91';
    histogram['\u2019'] = '%92';
    histogram['\u201C'] = '%93';
    histogram['\u201D'] = '%94';
    histogram['\u2022'] = '%95';
    histogram['\u2013'] = '%96';
    histogram['\u2014'] = '%97';
    histogram['\u02DC'] = '%98';
    histogram['\u2122'] = '%99';
    histogram['\u0161'] = '%9A';
    histogram['\u203A'] = '%9B';
    histogram['\u0153'] = '%9C';
    histogram['\u009D'] = '%9D';
    histogram['\u017E'] = '%9E';
    histogram['\u0178'] = '%9F';
    
    ret = encodeURIComponent(ret);
    for (unicodeStr in histogram) {
        hexEscStr = histogram[unicodeStr];
        ret = replacer(unicodeStr, hexEscStr, ret); 
    }
  
    return ret.replace(/(\%([a-z0-9]{2}))/g, function(full, m1, m2) {
        return "%"+m2.toUpperCase();
    });
}

</script>

</head>
<body>

</body>
</html>
