<%#*Listener api that runs along with scorm 1.2 course for tracking details when learner takes course %>
<%#*Author : Karthik%>

<html>
  <head>
    <%= favicon_link_tag "lion.png", :rel => "icon" %>
    <script type="text/javascript">
      
      // Shareable Content Object Instance ID
      // This is unique for each instance of the running course.
      var SCOInstanceID = getUrlParams('SCOInstanceID');


      // Capture and process parameter that has been recieved by this api.html file
      // from calling point of this api file i.e. scorm/show.html
      function getUrlParams(name)
      {
        name = name.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");
        var regexS = "[\\?&]"+name+"=([^&#]*)";
        var regex = new RegExp( regexS );
        var results = regex.exec( window.location.href );
        if( results == null )
          return "";
        else
          return results[1];
      }


      //////////////////////////////////////////////////Execution State Functions/////////////////////////////////////////////////

      // ------------------------------------------
      //   SCORM RTE Functions - Initialization
      // ------------------------------------------
      function LMSInitialize(dummyString) {
        if (dummyString == "")
        {
          //alert('The SCO established communication with the LMS.');
          return "true";
        }
        else
        {
          alert('An empty string must be passed for conformance to RTE standard. Failed to initialize LMS !');
          return "false";
        }
      }


      // ------------------------------------------
      //   SCORM RTE Functions - Closing The Session
      // ------------------------------------------
      function LMSFinish(dummyString) {
        if (dummyString == "")
        {//alert('The SCO has finished communicating with the LMS.');
          return "true";
        }
        else
        {
          alert('An empty string must be passed for conformance to RTE standard. Failed to close LMS session !');
          return "false";
        }
      }


      //////////////////////////////////////////////////Data Transfer Functions/////////////////////////////////////////////////

      // ------------------------------------------
      //   SCORM RTE Functions - Getting Values
      // ------------------------------------------
      function LMSGetValue(varname) {
        //alert('Getvalue for : '+varname);

        if (varname == 'cmi.core._children') {
          varvalue = "student_id,student_name,lesson_location,credit,lesson_status,entry,score,total_time,exit,session_time";
        }
        else if (varname == 'cmi.core.score._children')
        {
          varvalue = "raw";
        }
        else if (varname == 'cmi.interactions._children')
        {
          varvalue = "id,type,objectives,timestamp,correct_responses,weighting,learner_res ponse,result,latency,description";
        }
        else if (varname == 'cmi.interactions._count' || varname == 'cmi.objectives._count')
        {
          varvalue = "non-negative integer";
        }
        else
        {

          var req = AjaxRequest();

          // set up request parameters - uses GET method
          req.open('GET','/scorm/getvalue?varname='+urlencode(varname)+'&SCOInstanceID='+SCOInstanceID+'&code='+Math.random(),false);

          // submit to the server for processing
          req.send(null);
        }
        // process returned data - error condition
        if (req.status != 200) {
          alert('Problem with Request');
          return "";
        }

        // process returned data - OK
        else {
          var student_detail;
          var x = req.responseText;
          switch(varname)
          {
            case "cmi.core.student_id": student_detail = x.split('(')[5]; break;
            case "cmi.core.student_name": student_detail = x.split(')')[5]+','+""; break;
            case "cmi.core.score.raw": student_detail = x.split('@')[5]; break;
            case "cmi.core.score.max": student_detail = x.split('?')[5]; break;
            case "cmi.core.score.min": student_detail = x.split('/')[5]; break;
            case "cmi.core.lesson_status": student_detail = x.split('#')[5]; break;
            case "cmi.core.lesson_location": student_detail = x.split('*')[5]; break;
            case "cmi.core.lesson_mode": student_detail = x.split('$')[5]; break;
            case "cmi.core.session_time": student_detail = x.split('!')[5]; break;
            case "cmi.core.total_time": student_detail = x.split('[')[5]; break;
            case "cmi.suspend_data": student_detail = x.split(']')[5]; break;
            case "cmi.launch_data": student_detail = x.split('|')[5]; break;
            case "cmi.core.entry": student_detail = x.split('^')[5]; break;
            case "cmi.core.exit": student_detail = x.split('~')[5]; break;
            case "cmi.core.credit": student_detail = x.split('-')[5]; break;
          }
          return student_detail;
        }
      }


      // ------------------------------------------
      //   SCORM RTE Functions - Setting Values
      // ------------------------------------------
      function LMSSetValue(varname,varvalue) {
        //alert('LMS setval for '+varname+' : '+varvalue);
        // create request object
        var req = AjaxRequest();

        // set up request parameters - uses POST method
        req.open('POST','/scorm/setvalue?varname='+urlencode(varname)+'&SCOInstanceID='+SCOInstanceID+'&code='+Math.random(),false);

        // send header information along with the POST data
        var params = 'varvalue='+urlencode(varvalue);
        req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        req.setRequestHeader("Content-length", params.length);
        req.setRequestHeader("Connection", "close");

        // submit to the server for processing
        req.send(params);

        // process returned data - error condition
        if (req.status != 200) {
          alert('Problem with Request');
          return "false";
        }

        // process returned data - OK
        else {
          return "true";
        }

      }


      function LMSCommit(dummyString) {
        if (dummyString == "")
        {//alert('The data is persisted by the LMS');
          return "true";
        }
        else
        {
          alert('An empty string must be passed for conformance to RTE standard. Failed to commit !');
          return "false";
        }
      }



      //////////////////////////////////////////////////State Management Functions/////////////////////////////////////////////////

      // ------------------------------------------
      //   SCORM RTE Functions - Error Handling
      // ------------------------------------------
      function LMSGetLastError() {
        return 0;
      }

      function LMSGetDiagnostic(errorCode) {
        return "diagnostic string";
      }

      function LMSGetErrorString(errorCode) {
        return "error string";
      }

      // ------------------------------------------
      //   Other Functions: AJAX Request Handling
      // ------------------------------------------
      function AjaxRequest() {
        var request;

        // Opera 8.0+, Firefox, Safari
        try {
          request = new XMLHttpRequest();
        }

        // Internet Explorer Browsers
        catch (tryIE) {
          try {
            request = new ActiveXObject("Msxml2.XMLHTTP");
          }
          catch (tryOlderIE) {
            try {
              request = new ActiveXObject("Microsoft.XMLHTTP");
            }
            catch (failed) {
              alert("Error creating XMLHttpRequest");
            }
          }
        }
        return request;
      }

      function urlencode( str ) {

        var histogram = {}, unicodeStr='', hexEscStr='';
        var ret = (str+'').toString();

        var replacer = function(search, replace, str) {
          var tmp_arr = [];
          tmp_arr = str.split(search);
          return tmp_arr.join(replace);
        };

        // The histogram is identical to the one in urldecode.
        histogram["'"]   = '%27';
        histogram['(']   = '%28';
        histogram[')']   = '%29';
        histogram['*']   = '%2A';
        histogram['~']   = '%7E';
        histogram['!']   = '%21';
        histogram['%20'] = '+';
        histogram['\u00DC'] = '%DC';
        histogram['\u00FC'] = '%FC';
        histogram['\u00C4'] = '%D4';
        histogram['\u00E4'] = '%E4';
        histogram['\u00D6'] = '%D6';
        histogram['\u00F6'] = '%F6';
        histogram['\u00DF'] = '%DF';
        histogram['\u20AC'] = '%80';
        histogram['\u0081'] = '%81';
        histogram['\u201A'] = '%82';
        histogram['\u0192'] = '%83';
        histogram['\u201E'] = '%84';
        histogram['\u2026'] = '%85';
        histogram['\u2020'] = '%86';
        histogram['\u2021'] = '%87';
        histogram['\u02C6'] = '%88';
        histogram['\u2030'] = '%89';
        histogram['\u0160'] = '%8A';
        histogram['\u2039'] = '%8B';
        histogram['\u0152'] = '%8C';
        histogram['\u008D'] = '%8D';
        histogram['\u017D'] = '%8E';
        histogram['\u008F'] = '%8F';
        histogram['\u0090'] = '%90';
        histogram['\u2018'] = '%91';
        histogram['\u2019'] = '%92';
        histogram['\u201C'] = '%93';
        histogram['\u201D'] = '%94';
        histogram['\u2022'] = '%95';
        histogram['\u2013'] = '%96';
        histogram['\u2014'] = '%97';
        histogram['\u02DC'] = '%98';
        histogram['\u2122'] = '%99';
        histogram['\u0161'] = '%9A';
        histogram['\u203A'] = '%9B';
        histogram['\u0153'] = '%9C';
        histogram['\u009D'] = '%9D';
        histogram['\u017E'] = '%9E';
        histogram['\u0178'] = '%9F';

        // Begin with encodeURIComponent, which most resembles PHP's encoding functions
        ret = encodeURIComponent(ret);

        for (unicodeStr in histogram) {
          hexEscStr = histogram[unicodeStr];
          ret = replacer(unicodeStr, hexEscStr, ret);
        }

        // Uppercase for full PHP compatibility
        return ret.replace(/(\%([a-z0-9]{2}))/g, function(full, m1, m2) {
          return "%"+m2.toUpperCase();
        });
      }

    </script>

  </head>
  <body style="background-color: black; margin: 0px; padding: 0px; text-align: center;color: white;text-decoration: underline;width: auto;font-family:  sans-serif,lucida grande;font-size: 13px;">
    <a href="/courses/give_feedback/<%= params[:SCOInstanceID] %>" style="color: white;" target="_parent">Go to My Courses</a>
  </body>
</html>
